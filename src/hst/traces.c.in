/* -*- coding: utf-8 -*-
 * -----------------------------------------------------------------------------
 * Copyright © 2017, HST Project.
 * Please see the COPYING file in this distribution for license details.
 * -----------------------------------------------------------------------------
 */

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include "csp0.h"
#include "denotational.h"
#include "environment.h"
#include "process.h"

struct count_traces {
    struct csp_trace_visitor visitor;
    size_t count;
};

static void
count_traces_visit(struct csp *csp, struct csp_trace_visitor *visitor,
                   const struct csp_trace *trace)
{
    struct count_traces *self =
            container_of(visitor, struct count_traces, visitor);
    self->count++;
}

static struct count_traces
count_traces(void)
{
    struct count_traces self = {{count_traces_visit}, 0};
    return self;
}

static void
traces(int argc, char **argv)
{
    bool verbose = false;
    const char *str;
    struct csp *csp;
    struct csp_process *process;

    static struct option options[] = {{"verbose", no_argument, 0, 'v'},
                                      {0, 0, 0, 0}};

    while (true) {
        int option_index = 0;
        int c = getopt_long(argc, argv, "v", options, &option_index);
        if (c == -1) {
            break;
        }

        switch (c) {
            case 'v':
                verbose = true;
                break;

            default:
                fprintf(stderr, "Unknown option %c\n", c);
                exit(EXIT_FAILURE);
        }
    }
    argc -= optind, argv += optind;

    if (argc != 1) {
        fprintf(stderr, "Usage: hst traces [-v] <process>\n");
        exit(EXIT_FAILURE);
    }

    csp = csp_new();
    assert(csp != NULL);

    str = (argc--, *argv++);
    process = csp_load_csp0_string(csp, str);
    if (process == NULL) {
        csp_free(csp);
        fprintf(stderr, "Invalid CSP₀ process \"%s\"\n", str);
        exit(EXIT_FAILURE);
    }

    if (verbose) {
        struct csp_print_name print_name = csp_print_name(stdout);
        struct csp_print_traces print_traces =
                csp_print_traces(&print_name.visitor);
        csp_process_visit_maximal_finite_traces(csp, process,
                                                &print_traces.visitor);
    } else {
        struct count_traces count = count_traces();
        csp_process_visit_maximal_finite_traces(csp, process, &count.visitor);
        printf("Maximal finite traces: %zu\n", count.count);
    }

    csp_free(csp);
}
